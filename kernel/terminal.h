#ifndef _TERMINAL_H
#define _TERMINAL_H

#include "types.h"
#include "list.h"
#include "file.h"
#include "keyboard.h"
#include "mouse.h"

/* Number of supported terminals */
#define NUM_TERMINALS 3

#ifndef ASM

/* Keyboard input buffer */
typedef struct {
    char buf[128];
    int count;
    list_t sleep_queue;
} kbd_input_buf_t;

/* Mouse input buffer */
typedef struct {
    uint8_t buf[64];
    int count;
    list_t sleep_queue;
} mouse_input_buf_t;

/* Cursor position information */
typedef struct {
    /*
     * The cursor x-position in the current logical line.
     * This value can extend beyond VGA_TEXT_COLS. This is used
     * to determine whether we can backspace across screen lines.
     * This is reset to 0 whenever encountering a '\n' character.
     */
    int logical_x;

    /*
     * The cursor x-position in the current screen line.
     * This value must be less than VGA_TEXT_COLS.
     */
    int screen_x;

    /* The cursor y-position in the current screen line. */
    int screen_y;
} cursor_pos_t;

/* Combined terminal state information */
typedef struct {
    /* Keyboard input buffer */
    kbd_input_buf_t kbd_input;

    /* Mouse input buffer */
    mouse_input_buf_t mouse_input;

    /* Cursor position */
    cursor_pos_t cursor;

    /*
     * Pointer to a page-aligned buffer that acts as the virtual
     * "text mode memory" when the terminal is in the background
     * or the framebuffer is active. Never write to this directly;
     * always use active_mem.
     */
    uint8_t *bg_mem;

    /*
     * Pointer to the page containing the contents of the terminal.
     * Either points to the global VGA text-mode page if the
     * terminal is in the foreground and fbmap is disabled, or to
     * the bg_mem buffer otherwise.
     *
     * This pointer is always 1:1 mapped to a physical address.
     * When vidmap is active, a vidmap page (constant virtual addr)
     * will point to the same page as this.
     */
    uint8_t *active_mem;

    /*
     * Attribute byte used to write characters in this terminal.
     */
    uint8_t attrib;

    /*
     * ID of the foreground process group in this terminal.
     * Only processes in this group are allowed to read from
     * or write to the terminal, and any signals generated by
     * the terminal will only be delivered to processes in
     * this group.
     */
    int fg_group;
} terminal_t;

/* Updates the executing process's vidmap page */
void terminal_update_vidmap_page(int terminal_idx, bool vidmap);

/* Sets the display terminal */
void terminal_set_display(int index);

/* Enables/disables the framebuffer terminal mode */
void terminal_set_framebuffer(int index);
void terminal_reset_framebuffer(void);

/* Prints a character to the display terminal */
void terminal_putc(char c);

/* Prints a string to the display terminal */
void terminal_puts(const char *s);

/* Clears the display terminal's screen for a BSOD */
void terminal_clear_bsod(void);

/* Clears the display terminal's screen and input buffers */
void terminal_clear(void);

/* Handles keyboard input */
void terminal_handle_kbd_input(kbd_input_t input);

/* Handles mouse input */
void terminal_handle_mouse_input(mouse_input_t input);

/* Opens the stdin and stdout streams for a process */
int terminal_open_streams(file_obj_t **files);

/* Foreground process group syscalls */
void terminal_tcsetpgrp_impl(int terminal, int pgrp);
__cdecl int terminal_tcgetpgrp(void);
__cdecl int terminal_tcsetpgrp(int pgrp);

/* vidmap() syscall handler */
__cdecl int terminal_vidmap(uint8_t **screen_start);

/* Initializes the terminal */
void terminal_init(void);

#endif /* ASM */

#endif /* _TERMINAL_H */
